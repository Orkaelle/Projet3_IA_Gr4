import os, sys, email
import numpy as np 
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns; sns.set_style('whitegrid')
import wordcloud
from nltk.tokenize.regexp import RegexpTokenizer
from sklearn.feature_extraction.stop_words import ENGLISH_STOP_WORDS
import csv

dir_path = os.path.dirname(os.path.realpath(__file__))
file_path = os.path.join(dir_path, 'datasets/dataset_1.csv')


def get_text_from_email(msg):
    '''recuperer le contenu d'un email'''
    parts = []
    for part in msg.walk():
        if part.get_content_type() == 'text/plain':
            parts.append( part.get_payload() )
    return ''.join(parts)

def split_email_addresses(line):
    '''Sepparer plusieurs adresses'''
    if line:
        addrs = line.split(',')
        addrs = frozenset(map(lambda x: x.strip(), addrs))
    else:
        addrs = None
    return addrs



# afficher une graphe avec le nombre d'emails envoyés par tranche d'horaire
def get_emails_sent_by_time_slot(emails_df):
    ax = emails_df.groupby(emails_df['date'].dt.hour)['content'].count().plot()
    ax.set_xlabel('Heure', fontsize=18)
    ax.set_ylabel('Nbr emails', fontsize=18)

    file_path_save = os.path.join(dir_path, 'results/emails_sent_by_slot_hour.png')

    plt.savefig(file_path_save)



# list des presonnes avec le nombre d'emails envoyés
def get_emails_sent_by_person_list(emails_df):
    tokenizer = RegexpTokenizer(r'(?u)\b\w\w+\b')
    emails_df['subject_wc'] = emails_df['subject'].map(lambda x: len(tokenizer.tokenize(x)))
    emails_df['content_wc'] = emails_df['content'].map(lambda x: len(tokenizer.tokenize(x)))

    grouped_by_people = emails_df.groupby('from').agg({
            'content': 'count',
            'subject_wc': 'mean',
            'content_wc': 'mean',
        })

    grouped_by_people.rename(columns={'content': 'N emails',
                                        'subject_wc': 'Subject word count',
                                    'content_wc': 'Content word count'}, inplace=True)

    grouped_by_people.sort_values(by=['N emails'], ascending=False)

    file_path_send = file_path = os.path.join(dir_path, 'results/emails_by_person.csv')

    grouped_by_people.to_csv(file_path_send)



# list de qui envoie à qui
def get_person_send_to_person(emails_df):
    sub_df = emails_df[['from', 'to', 'date']].dropna()
    print(sub_df.shape)

    # supprimer les emails envoyer à plusieurs personnes
    sub_df = sub_df.loc[sub_df['to'].map(len) == 1]
    sub_df = sub_df.groupby(['from', 'to']).count().reset_index()
    sub_df['from'] = sub_df['from'].map(lambda x: next(iter(x)))
    sub_df['to'] = sub_df['to'].map(lambda x: next(iter(x)))
    sub_df.rename(columns={'date': 'count'}, inplace=True)
    sub_df.sort_values(by=['count'], ascending=False).head(10)

    print(sub_df.shape)
    print(sub_df)

    file_path_send = file_path = os.path.join(dir_path, 'results/to_send_to.csv')

    sub_df.to_csv(file_path_send, index = False)



# nombre de mots apparus dans l'objet sujet
def get_words_in_subject(emails_df):
    subject = ' '.join(emails_df.sample(500)['subject'])
    fig, ax = plt.subplots(figsize=(16, 12))
    wc = wordcloud.WordCloud(width=800, 
                            height=600, 
                            max_words=200,
                            stopwords=ENGLISH_STOP_WORDS).generate(subject)
    ax.imshow(wc)
    ax.axis("off")

    plt.savefig('results/words_in_subjects.png')


# nombre de mots apparus dans l'objet sujet
def get_words_in_content(emails_df):
    contents = ' '.join(emails_df.sample(500)['content'])
    fig, ax = plt.subplots(figsize=(16, 12))
    wc = wordcloud.WordCloud(width=800, 
                            height=600, 
                            max_words=200,
                            stopwords=ENGLISH_STOP_WORDS).generate(contents)
    ax.imshow(wc)
    ax.axis("off")

    plt.savefig('results/words_in_content.png')

def get_words_by_keyword():
    file_path = os.path.join(dir_path, 'datasets/motsCategories.csv')
    emails_df = pd.read_csv(file_path)
    categories = ' '.join(emails_df.sample(500)['keyword'])
    fig, ax = plt.subplots(figsize=(16, 12))
    wc = wordcloud.WordCloud(width=800, 
                            height=600, 
                            max_words=200,
                            stopwords=ENGLISH_STOP_WORDS).generate(categories)
    ax.imshow(wc)
    ax.axis("off")

    plt.savefig('results/words_by_keywords.png')

    #plt.show()

# initialiser le dataframe emails
def initialize():

    emails_df = pd.read_csv(file_path)
    messages = list(map(email.message_from_string, emails_df['body']))
    emails_df.drop('body', axis=1, inplace=True)
    keys = messages[0].keys()
    for key in keys:
        emails_df[key] = [doc[key] for doc in messages]
    emails_df['content'] = list(map(get_text_from_email, messages))
    emails_df['from'] = emails_df['from'].map(split_email_addresses)
    emails_df['to'] = emails_df['to'].map(split_email_addresses)

    del messages

    # Parse datetime
    emails_df['date'] = pd.to_datetime(emails_df['date'], infer_datetime_format=True, utc=True)
    emails_df.dtypes

    print(emails_df)

    return emails_df


# generer un graph qui represente la liaison entre plusieurs personnes
def get_social_network():
    import networkx as nx
    import matplotlib.pyplot as plt
    import warnings; warnings.simplefilter('ignore')

    G_symmetric = nx.Graph()    

    file_path = os.path.join(dir_path, 'results/to_send_to.csv')
    emails_df = pd.read_csv(file_path)
    emails_top_50 = emails_df.sample(n = 50) # on prend 50 personnes pour tester

    for ind in emails_top_50.index:
        to = emails_top_50['to'][ind].replace("[", "")
        to = to.replace("]", "")
        to  = to.replace("'", "")
        print(emails_top_50['from'][ind], to)
        G_symmetric.add_edge(emails_top_50['from'][ind], to)    


    plt.figure(figsize=(5,5))
    nx.draw_networkx(G_symmetric)

    plt.savefig('results/social_network.png')

    #plt.show()

def main():
    """Entrypoint to application."""
    emails_df = initialize()
    get_emails_sent_by_time_slot(emails_df)
    get_person_send_to_person(emails_df)
    get_emails_sent_by_person_list(emails_df)
    get_words_in_subject(emails_df)
    get_words_in_content(emails_df)
    get_words_by_keyword()

    get_social_network()

if __name__ == '__main__':
    main()